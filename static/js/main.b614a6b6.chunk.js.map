{"version":3,"sources":["movies.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","setTimeout","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"mSA0CeA,MAnCf,YAAwD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC1C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACI,qBAAIA,UAAU,gBAAd,UAA+BJ,EAA/B,OACA,oBAAII,UAAU,iBAAd,SACKD,EAAOI,KAAK,SAACC,EAAOC,GAGjB,OAAO,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAGxB,oBAAIL,UAAU,eAAd,SAA8BL,IAG9B,mBAAGK,UAAU,iBAAb,SAA+BH,EAAQS,MAAM,EAAG,cC6EjDC,E,4MA3FbC,MAAQ,CAENC,WAAY,EAEZC,OAAQ,I,EAQVC,U,sBAAY,8BAAAC,EAAA,4DACE,yDADF,SAU+BC,IAAMC,IATnC,0DADF,gBAUYJ,EAVZ,EAUHK,KAAOA,KAAQL,OAItBM,QAAQC,IAAIP,GAEZ,EAAKQ,SAAS,CAACR,OAASA,EAAQD,WAAY,IAK5CO,QAAQC,IAAI,EAAKT,MAAME,QArBb,2C,kEAwBS,IAAD,OAClBS,YAAY,WACV,EAAKD,SAAS,CAACT,WAAW,MAC1B,KAQFW,KAAKT,c,+BAII,IACFF,EAAaW,KAAKZ,MAAlBC,UAOAC,EAAUU,KAAKZ,MAAfE,OAKP,OACE,yBAASV,UAAU,YAAnB,SACGS,EACD,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAkB,GAEZ,OADAL,QAAQC,IAAII,GACL,cAAC,EAAD,CAGPC,GAAID,EAAMC,GACV3B,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfE,OAAQsB,EAAMtB,OACdD,OAAQuB,EAAME,oBANTF,EAAMC,e,GA7EHE,IAAMC,WCCxBC,IAASC,OACL,cAAC,EAAD,IASFC,SAASC,eAAe,W","file":"static/js/main.b614a6b6.chunk.js","sourcesContent":["/* 개별 movie를 render하는 파일 */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport './movies.css'\r\n\r\n\r\n/* movie는 state가 필요 없기때문에 component 클래스를 사용하지 않아도 된다. */\r\nfunction Movie({year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}></img>\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie__title \">{title}}</h3>\r\n                <ul className=\"movie__genres \">\r\n                    {genres.map( (genre, index) => {\r\n                        /* 같은 클래스 요소가 여러개 있으면 리액트에서는 id마냥 key를 달라고 함\r\n                        JS map에는 python의 enumerate처럼 index를 얻을 수 있는 기능 있음 */\r\n                        return <li key={index} className=\"genres__genre\">{genre}</li>\r\n                    })}\r\n                </ul>\r\n                <h3 className=\"movie__year \">{year}</h3>\r\n                {/* summary 텍스트가 너무 기니까 좀 자르자!\r\n                summary는 array로 들어오는데 얘를 어떻게 자를까? */}\r\n                <p className=\"movie__summary\">{summary.slice(0, 140)}</p>\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\n\r\n/* React 컴포넌트의 propTypes 속성 \r\n어짜피 App.js에서 클래스로 들어가잖아*/\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    /* 이미지도 다 바이너리 문자열로 가져오니까 */\r\n    poster : PropTypes.string.isRequired,\r\n    /* array의 string 요소 */\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie","import React from \"react\"\nimport axios from \"axios\"\nimport './App.css'\nimport Movie from './movies'\n/* 리액트 스타일 컴포넌트\nhttps://www.youtube.com/watch?v=MqGxMOhPqeI&list=PL7jH19IHhOLNUIOJcGj6egl-dNB-QXjEm&ab_channel=%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94NomadCoders\n*/\n\nclass App extends React.Component {\n  state = {\n    /* App이 실행(Mount)됨을 알리기 위해 isLoading이란 변수 */\n    isLoading : true,\n    /* 근데 state에 추가하지 않고 나중에 setState에서 추가해도 오류나지 않는다. */\n    movies: []\n  }\n  /* 맨 처음 호출될 때\n  render와 lifecylce은 다른 메소드니까 render 밖에 작성해야 함 */\n  /* 함수 이런식으로 쓰는것도 ES6 */\n\n  /* 비동기. wait for axios! ES6라고 하는데 nodeJS랑 똑같네\n  await 쓰려면 함수 앞에 async 써야 함 */\n  getMovies = async () => {\n    const URL = \"https://yts.mx/api/v2/list_movies.json?sort_by=rating \"\n    // const movies = await axios.get(URL)\n    // console.log(movies.data.data.movies);\n    /* 원래 데이터 형태\n    movies = {\n      data: {data: {movies: {'const에 들어갈 원하는 정보'} } }\n    } */\n\n\n    const {data: {data: { movies }}} = await axios.get(URL)\n    /* 원래는 {data: {data: { movies }}} = movies 인 거야\n    원래는 movies : movies 인데 같으니까 movies으로만 써도 되는 것\n     */\n    console.log(movies);\n    /* movies 안의 movie들을 state 안의 movie array에 넣을 것 */\n    this.setState({movies : movies, isLoading : false})\n    /* 앞에껀 state에 있는 movies array, 뒤에껀 url로 받아온 것 */\n    /* {} 껍질 벗길 수 있다그랬지? 게다가 여긴 변수이름도 똑같으니 \n    this.setState({{movies}}) 로 사용가능\n    */\n    console.log(this.state.movies);\n\n  }\n  componentDidMount() {\n    setTimeout( ()=> {\n      this.setState({isLoading: false})\n    },3000)\n    /* render가 처음 실행될 때 data를 fetch함. 보통 fetch()를 사용하긴 하는데\n    axios() 사용할거임. axios는 fetch가 땅콩이면 겉의 초콜릿임\n    data 가져오는게 완료됐으면 그 데이터를 render할 거임 */\n\n    /* YTS.com 의 API를 사용할 것\n    잘 정리되어있긴 한데 불법이라 URL이 자주 바뀜\n    그래서 니콜라스가 만든 api를 사용할 것 */\n    this.getMovies()\n  }\n\n\n  render () {\n    const {isLoading} = this.state\n    /* return 안의 괄호 안 코드는 JS 코드라 그랬지?\n    근데 this.state 계속 써야하나? 귀찮노\n    ES6코드 */\n    /* object 해체하는 방법임\n    아마 state에 isLoading 하나밖에 없기 때문에 가능한 것으로 보임 \n    변수를 설정하려면 당연히 return 밖에서 해야겠지 */\n    const {movies} = this.state\n\n\n    /* html의 class와 JS의 class가 겹치기 때문에 className \n    html의 for(label)과 JS의 for(반복문)이 겹치기 때문에 htmlfor*/\n    return (\n      <section className=\"container\">\n        {isLoading ? \n        <div className=\"loader\">\n          <span className=\"loader__txt\">Loading...</span>\n          {/* father __ child 관계 표현 */}\n        </div> : \n        <div className=\"movies\">\n          {movies.map(movie => {\n          console.log(movie);\n          return <Movie \n          /* key 요소가 있어야 한대 */\n          key={movie.id} \n          id={movie.id} \n          year={movie.year} \n          title={movie.title} \n          summary={movie.summary} \n          genres={movie.genres} \n          poster={movie.medium_cover_image} />\n          })}\n        </div>\n        }\n      </section>\n    )\n  }  \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n/* import Food from './1_propTypes.js'\n하고 ReactDOM.render에 <App>, <Food>를 둘 다 넣으려고 했지만\n작동하지 않는다. 왜?\nReact app은 하나의 component만을 render할 수 있기 때문이다.\n그래서 Food를 App 안에 넣는 것이다.\n*/\nReactDOM.render(\n    <App />, \n    /* Component: HTML을 return하는 함수\n    App.js를 가서 보면 HTML element들을 return한다.\n    즉, React는 component를 사용해서 HTML을 작성하고, \n    이러한 JS와 HTML의 조합을 JSX라고 한다.\n\n    그러면 새로운 component를 어떻게 만들 수 있을까?\n    1_propTypes.js가 새로운 컴포넌트를 만들었던 과정 \n    */\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}